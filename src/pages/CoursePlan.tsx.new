import type { FC } from 'react';
import { useState } from 'react';
import { Container, Box, Typography, CircularProgress } from '@mui/material';
import { SemesterHeader } from '../components/Semester/SemesterHeader';
import { CourseList } from '../components/Semester/CourseList';
import { CourseSelectionDialog } from '../components/CourseSelection/CourseSelectionDialog';
import { useCoursePlan } from '../hooks/useCoursePlan';
import { useCourses } from '../hooks/useCourses';
import type { Course, Semester } from '../types';

const CoursePlan: FC = () => {
  const { coursePlan, loading: planLoading, error: planError, updateCoursePlan } = useCoursePlan();
  const { courses, loading: coursesLoading, error: coursesError } = useCourses();
  
  const [selectedSemester, setSelectedSemester] = useState<number | null>(null);
  const [courseSelectionDialogOpen, setCourseSelectionDialogOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');

  const handleAddCourse = (semesterId: number) => {
    setSelectedSemester(semesterId);
    setCourseSelectionDialogOpen(true);
  };

  const handleDeleteCourse = async (courseId: string) => {
    try {
      setLoading(true);
      const course = courses.find(c => c.id === courseId);
      if (course && coursePlan) {
        const updatedSemesters = coursePlan.semesters.map(semester => ({
          ...semester,
          courseIds: semester.courseIds.filter(id => id !== courseId)
        }));
        await updateCoursePlan(updatedSemesters);
      }
    } catch (err) {
      setError('Failed to delete course');
    } finally {
      setLoading(false);
    }
  };

  const handleMoveCourse = async (courseId: string, targetSemester: number) => {
    try {
      const course = courses.find(c => c.id === courseId);
      if (course && coursePlan) {
        const updatedSemesters = coursePlan.semesters.map(semester => ({
          ...semester,
          courseIds: semester.id === targetSemester 
            ? [...semester.courseIds, courseId]
            : semester.courseIds.filter(id => id !== courseId)
        }));
        await updateCoursePlan(updatedSemesters);
      }
    } catch (err) {
      setError('Failed to move course');
    }
  };

  if (loading || planLoading || coursesLoading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error || planError || coursesError) {
    return (
      <Box sx={{ p: 3 }}>
        <Typography color="error">
          {error || planError || coursesError}
        </Typography>
      </Box>
    );
  }

  if (!coursePlan) {
    return (
      <Box sx={{ p: 3 }}>
        <Typography>No course plan found</Typography>
      </Box>
    );
  }

  return (
    <Container maxWidth="lg">
      {coursePlan.semesters.map((semester: Semester) => (
        <Box key={semester.id} sx={{ mb: 4 }}>
          <SemesterHeader
            semesterId={semester.id}
            courseCount={semester.courseIds.length}
            isCollapsed={false}
            onToggleCollapse={() => {}}
            onAddCourse={() => handleAddCourse(semester.id)}
          />
          <CourseList
            courses={courses.filter(c => semester.courseIds.includes(c.id))}
            onDeleteCourse={handleDeleteCourse}
            onMoveCourse={handleMoveCourse}
            onDragStart={() => {}}
            onDragEnd={() => {}}
          />
        </Box>
      ))}

      <CourseSelectionDialog
        open={courseSelectionDialogOpen}
        onClose={() => setCourseSelectionDialogOpen(false)}
        onSelectCourse={(course) => {
          if (selectedSemester !== null) {
            handleMoveCourse(course.id, selectedSemester);
          }
          setCourseSelectionDialogOpen(false);
        }}
        courses={courses}
        searchTerm={searchTerm}
        onSearchChange={setSearchTerm}
      />
    </Container>
  );
};

export default CoursePlan;
